class TwitchIRCClient {
    constructor() {
        this.socket = null;
        this.onMessage = null;
        this.votes = {
            '!1': 0,
            '!2': 0
        };
        this.userVotes = {};
        this.votingAllowed = false;
        this.voteFormat = 'strict'; // Default 'strict'
        this.voteQueue = [];       // <<< –ù–û–í–ê –ß–ï–†–ì–ê
        this.queueInterval = null; // <<< ID —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏
        this.QUEUE_PROCESS_INTERVAL = 100; // –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏ (–º—Å)
    }

    setVoteFormat(format) {
        const validFormats = ['strict', 'simple', 'both'];
        if (validFormats.includes(format)) {
            this.voteFormat = format;
            console.log(`Twitch IRC: Vote format set to '${this.voteFormat}'`);
        } else {
            console.warn(`Twitch IRC: Invalid vote format provided: ${format}. Using '${this.voteFormat}'.`);
            this.voteFormat = 'strict';
        }
    }

    init(username, oauthToken, channel, onMessageCallback) {
        if (this.socket && this.socket.readyState === WebSocket.OPEN) {
            console.warn(`Twitch IRC: –°–ø—Ä–æ–±–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ–º—É –∑'—î–¥–Ω–∞–Ω–Ω—ñ –¥–æ #${this.channel}. –°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–∫–ª—é—á—ñ—Ç—å—Å—è.`);
            return;
        }
        this.username = username;
        this.token = oauthToken;
        this.channel = channel.toLowerCase();
        this.onMessage = onMessageCallback;
        console.log(`Twitch IRC: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ #${this.channel}...`);
        this.socket = new WebSocket("wss://irc-ws.chat.twitch.tv:443");

        this.socket.onopen = () => {
            this.send(`NICK ${this.username}`);
            this.send(`JOIN #${this.channel}`);
            this.send("CAP REQ :twitch.tv/tags twitch.tv/commands twitch.tv/membership");
            console.log(` üîå  Twitch IRC: –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ #${this.channel} –≤—ñ–¥–∫—Ä–∏—Ç–æ.`);
            this.updateVoteDisplay();
            if (typeof updateTwitchStatus === 'function') {
                updateTwitchStatus(true, this.channel);
            }
            this._startQueueProcessing(); // <<< –ó–ê–ü–£–°–ö –û–ë–†–û–ë–ö–ò –ß–ï–†–ì–ò
        };

        this.socket.onmessage = (event) => {
            const raw = event.data.trim();
            raw.split('\r\n').forEach(this._handleMessage.bind(this));
        };

        this.socket.onerror = (err) => {
            console.error(` ‚ùå  Twitch IRC  –ø–æ–º–∏–ª–∫–∞   –¥–ª—è  #${this.channel}:`, err);
            if (typeof updateTwitchStatus === 'function') {
                updateTwitchStatus(false, this.channel, '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è');
            }
            this._stopQueueProcessing(); // <<< –ó–£–ü–ò–ù–ö–ê –û–ë–†–û–ë–ö–ò –ß–ï–†–ì–ò
            this.socket = null;
            this.channel = null;
        };

        this.socket.onclose = () => {
            console.log(` üîå  Twitch IRC: –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ #${this.channel} –∑–∞–∫—Ä–∏—Ç–æ.`);
            const wasConnectedChannel = this.channel;
            this._stopQueueProcessing(); // <<< –ó–£–ü–ò–ù–ö–ê –û–ë–†–û–ë–ö–ò –ß–ï–†–ì–ò
            this.socket = null;
            this.channel = null;
            if (typeof updateTwitchStatus === 'function' && typeof currentTwitchChannel !== 'undefined' && wasConnectedChannel === currentTwitchChannel) {
                updateTwitchStatus(false);
            }
        };
    }

    send(msg) {
        if (this.socket && this.socket.readyState === WebSocket.OPEN) {
            this.socket.send(msg);
        } else {
            // console.warn("Twitch IRC: –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç–æ–º—É —Å–æ–∫–µ—Ç—ñ.");
        }
    }

    _handleMessage(raw) {
        if (raw.startsWith("PING")) {
            this.send("PONG :tmi.twitch.tv");
            return;
        }

        const match = raw.match(/@([^ ]+) :([^!]+)!.* PRIVMSG #([^ ]+) :(.+)/);
        if (match) {
            const tagsRaw = match[1];
            const usernameRaw = match[2];
            const channelName = match[3];
            const message = match[4].trim();

            const tags = Object.fromEntries(
                tagsRaw.split(";").map(s => {
                    const [key, value] = s.split("=");
                    const decodedValue = value ? value.replace(/\\s/g, ' ').replace(/\\:/g, ';').replace(/\\\\/g, '\\').replace(/\r/g, '').replace(/\n/g, '') : '';
                    return [key, decodedValue];
                })
            );

            const displayName = tags["display-name"] || usernameRaw;
            const usernameLogin = tags["login"] || usernameRaw;

            let voteCommand = null;
            const lowerCaseMessage = message.toLowerCase();

            if (this.voteFormat === 'strict' || this.voteFormat === 'both') {
                if (lowerCaseMessage === '!1') voteCommand = '!1';
                else if (lowerCaseMessage === '!2') voteCommand = '!2';
            }
            if (voteCommand === null && (this.voteFormat === 'simple' || this.voteFormat === 'both')) {
                if (lowerCaseMessage === '1') voteCommand = '!1';
                else if (lowerCaseMessage === '2') voteCommand = '!2';
            }

            // <<< –ó–ú–Ü–ù–ê –¢–£–¢: –î–æ–¥–∞—î–º–æ –¥–æ —á–µ—Ä–≥–∏ –∑–∞–º—ñ—Å—Ç—å –ø—Ä—è–º–æ–≥–æ –≤–∏–∫–ª–∏–∫—É _processVote >>>
            if (voteCommand !== null && this.votingAllowed) {
                this.voteQueue.push({ usernameLogin, vote: voteCommand, tags });
                // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —á–µ—Ä–≥–∏
                console.log(`Added vote from ${usernameLogin} for ${voteCommand} to queue. Queue size: ${this.voteQueue.length}`);
            }
            // <<< –ö–Ü–ù–ï–¶–¨ –ó–ú–Ü–ù–ò >>>

            if (this.onMessage) {
                this.onMessage({
                    username: displayName,
                    login: usernameLogin,
                    channel: channelName,
                    message: message,
                    tags: tags
                });
            }
        }
    }

    // <<< –ù–û–í–ò–ô –ú–ï–¢–û–î: –ó–∞–ø—É—Å–∫ –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏ >>>
    _startQueueProcessing() {
        if (this.queueInterval) {
            clearInterval(this.queueInterval); // –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ —Å—Ç–∞—Ä–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –∑—É–ø–∏–Ω–µ–Ω–æ
        }
        this.queueInterval = setInterval(() => {
            if (this.voteQueue.length > 0) {
                const voteData = this.voteQueue.shift(); // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑ —á–µ—Ä–≥–∏
                this._processVote(voteData.usernameLogin, voteData.vote, voteData.tags);
            }
        }, this.QUEUE_PROCESS_INTERVAL);
        console.log("Twitch IRC: Vote queue processing started.");
    }

    // <<< –ù–û–í–ò–ô –ú–ï–¢–û–î: –ó—É–ø–∏–Ω–∫–∞ –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏ >>>
    _stopQueueProcessing() {
        if (this.queueInterval) {
            clearInterval(this.queueInterval);
            this.queueInterval = null;
            console.log("Twitch IRC: Vote queue processing stopped.");
        }
        // –û—á–∏—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ? –ó–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –ª–æ–≥—ñ–∫–∏ - –º–æ–∂–ª–∏–≤–æ, –≥–æ–ª–æ—Å–∏, —â–æ –Ω–µ –≤—Å—Ç–∏–≥–ª–∏ –æ–±—Ä–æ–±–∏—Ç–∏—Å—è, –º–∞—é—Ç—å –±—É—Ç–∏ –≤—Ç—Ä–∞—á–µ–Ω—ñ
        this.voteQueue = [];
    }

    _processVote(usernameLogin, vote, tags) {
        // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è (–ø–æ–¥–≤—ñ–π–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —Ç–∞–∫–æ–∂ —î –≤ _handleMessage)
        if (!this.votingAllowed) {
            return;
        }

        // 2. –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–º'—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        let displayName = tags["display-name"] || usernameLogin;

        // 3. –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å—É
        if (this.userVotes.hasOwnProperty(usernameLogin)) {
            const previousVoteData = this.userVotes[usernameLogin];
            if (previousVoteData.vote !== vote) {
                this.votes[previousVoteData.vote]--;
                this.votes[vote]++;
                previousVoteData.vote = vote;
                previousVoteData.displayName = displayName; // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–º'—è
                this.updateVoteDisplay();
                console.log(` üó≥Ô∏è ${displayName} –∑–º—ñ–Ω–∏–≤(–ª–∞) –≥–æ–ª–æ—Å –Ω–∞ ${vote}. –†–µ–∑—É–ª—å—Ç–∞—Ç: !1:${this.votes['!1']} !2:${this.votes['!2']}`);
            }
        } else {
            this.votes[vote]++;
            this.userVotes[usernameLogin] = { vote: vote, displayName: displayName };
            this.updateVoteDisplay();
            console.log(` üó≥Ô∏è ${displayName} –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–≤(–ª–∞) –∑–∞ ${vote}. –†–µ–∑—É–ª—å—Ç–∞—Ç: !1:${this.votes['!1']} !2:${this.votes['!2']}`);
        }
    }

    getVoteResults() {
        return `!1:${this.votes['!1']} !2:${this.votes['!2']}`;
    }

// –£ —Ñ–∞–π–ª—ñ voting 1.1.js, –∑–Ω–∞–π–¥—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é updateVoteDisplay.
    // –ó–∞–º—ñ–Ω—ñ—Ç—å —ó—ó –Ω–∞ —Ü–µ–π –∫–æ–¥:
    updateVoteDisplay() {
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
        const voteDisplay1Element = document.getElementById('voteDisplay1');
        const voteDisplay2Element = document.getElementById('voteDisplay2');

        // <--- –ü–ï–†–ï–ö–û–ù–ê–ô–¢–ï–°–Ø, –©–û –§–£–ù–ö–¶–Ü–Ø getSuffix –û–ì–û–õ–û–®–ï–ù–ê –ü–û–ó–ê updateVoteDisplay
        // —Ç–∞ –∑—Ä–æ–±–ª–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ—é: window.getVoteSuffix = getSuffix;
        // –Ø–∫—â–æ getSuffix –≤—Å–µ —â–µ —Ç—É—Ç, –ø–µ—Ä–µ–Ω–µ—Å—ñ—Ç—å —ó—ó –í–ò–©–ï –≤ —Ñ–∞–π–ª, –ø–æ–∑–∞ updateVoteDisplay.
        function getSuffix(count) {
            count = Math.abs(count) % 100;
            const lastDigit = count % 10;
            if (count > 10 && count < 20) return ' –≥–æ–ª–æ—Å—ñ–≤';
            if (lastDigit === 1) return ' –≥–æ–ª–æ—Å';
            if (lastDigit >= 2 && lastDigit <= 4) return ' –≥–æ–ª–æ—Å–∏';
            return ' –≥–æ–ª–æ—Å—ñ–≤';
        }
        // <--- –ö—ñ–Ω–µ—Ü—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ getSuffix ---


        // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –≥–æ–ª–æ—Å–∏
        const votes1 = this.votes['!1'] || 0; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ this.votes –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É
        const votes2 = this.votes['!2'] || 0;

        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—É—Ñ—ñ–∫—Å–∏
        const textSuffix1 = getSuffix(votes1);
        const textSuffix2 = getSuffix(votes2);

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –û–°–ù–û–í–ù–û–ú–£ –≤—ñ–∫–Ω—ñ
        if (voteDisplay1Element) {
             // –ú–æ–∂–ª–∏–≤–æ, —É –≤–∞—Å —Ç—É—Ç —Å–∫–ª–∞–¥–Ω—ñ—à–∞ –ª–æ–≥—ñ–∫–∞ –∑ spans, –∞–¥–∞–ø—Ç—É–π—Ç–µ –ø—ñ–¥ –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π DOM
            voteDisplay1Element.textContent = votes1 + textSuffix1;
        }
        if (voteDisplay2Element) {
            // –ú–æ–∂–ª–∏–≤–æ, —É –≤–∞—Å —Ç—É—Ç —Å–∫–ª–∞–¥–Ω—ñ—à–∞ –ª–æ–≥—ñ–∫–∞ –∑ spans, –∞–¥–∞–ø—Ç—É–π—Ç–µ –ø—ñ–¥ –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π DOM
            voteDisplay2Element.textContent = votes2 + textSuffix2;
        }

        // <--- –î–û–î–ê–ù–û: –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ pop-up –≤—ñ–∫–Ω–∞ ---
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≥–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ—Å–Ω—É—î, –ø–µ—Ä—à –Ω—ñ–∂ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —ó—ó
        if (typeof window.sendVoteUpdateToPopup === 'function') {
             window.sendVoteUpdateToPopup(votes1, textSuffix1, votes2, textSuffix2);
             //console.log("  üìä   updateVoteDisplay: Vote update sent to popup."); // –õ–æ–≥ –ø—Ä–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
        } else {
             console.warn("  üìä   updateVoteDisplay: window.sendVoteUpdateToPopup is not available."); // –õ–æ–≥, —è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞
        }
        // <--- –ö–Ü–ù–ï–¶–¨ –î–û–î–ê–ù–û–ì–û ---
    }

    resetVotes() {
        console.log(" üîÑ  –°–∫–∏–¥–∞–Ω–Ω—è –≥–æ–ª–æ—Å—ñ–≤...");
        this.votes = { '!1': 0, '!2': 0 };
        this.userVotes = {};
        this.voteQueue = []; // <<< –û–ß–ò–©–£–Ñ–ú–û –ß–ï–†–ì–£ –ü–†–ò –°–ö–ò–î–ê–ù–ù–Ü
        this.updateVoteDisplay();
        console.log(" üìä  –ì–æ–ª–æ—Å–∏ —Å–∫–∏–Ω—É—Ç–æ. –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", this.getVoteResults());
    }

    enableVoting() {
        console.log("Twitch IRC: Voting ENABLED");
        this.votingAllowed = true;
         // –û—á–∏—â–∞—î–º–æ —á–µ—Ä–≥—É –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è, —â–æ–± —Å—Ç–∞—Ä—ñ –≥–æ–ª–æ—Å–∏ –Ω–µ –æ–±—Ä–æ–±–∏–ª–∏—Å—å
        this.voteQueue = [];
        console.log("Twitch IRC: Vote queue cleared.");
    }

    disableVoting() {
        console.log("Twitch IRC: Voting DISABLED");
        this.votingAllowed = false;
        // –ó–∞–∑–≤–∏—á–∞–π –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—á–∏—â–∞—Ç–∏ —á–µ—Ä–≥—É –ø—Ä–∏ disable, –æ–±—Ä–æ–±–∫–∞ –∑—É–ø–∏–Ω–∏—Ç—å—Å—è –≤ _startQueueProcessing
    }

    disconnect() {
        if (this.socket && this.socket.readyState === WebSocket.OPEN) {
            console.log(` üîå  Twitch IRC: –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ #${this.channel}...`);
            this.send(`PART #${this.channel}`);
            this.socket.close();
        } else if (this.socket && this.socket.readyState === WebSocket.CONNECTING) {
            console.log(` üîå  Twitch IRC: –≤—ñ–¥–º—ñ–Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ #${this.channel}...`);
            this.socket.close();
        } else {
            this.socket = null;
            this.channel = null;
        }
         this._stopQueueProcessing(); // <<< –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑—É–ø–∏–Ω–∫—É –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏ –ø—Ä–∏ –¥–∏—Å–∫–æ–Ω–µ–∫—Ç—ñ
    }
} // <<< –ö–Ü–ù–ï–¶–¨ –ö–õ–ê–°–£ TwitchIRCClient

// --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Twitch –∫–ª—ñ—î–Ω—Ç–∞ ---
const twitch = new TwitchIRCClient();
